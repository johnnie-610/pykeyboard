{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyKeyboard Documentation","text":"**Best Keyboard Library for Kurigram**"},{"location":"#what-is-pykeyboard","title":"\ud83d\ude80 What is PyKeyboard?","text":"<p>PyKeyboard is a modern, fully type-safe Python library for creating beautiful and functional inline and reply keyboards for Telegram bots using Kurigram.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>\ud83c\udf0d 50+ Languages - Comprehensive locale support with native language names and flags</li> <li>\ud83d\udcd6 Pagination - Advanced pagination with automatic duplicate prevention</li> <li>\ud83c\udf10 Language Selection - Built-in multi-language keyboard support</li> </ul>"},{"location":"#quick-examples","title":"\ud83d\udcd6 Quick Examples","text":""},{"location":"#inline-keyboard","title":"Inline Keyboard","text":"<pre><code>from pykeyboard import InlineKeyboard, InlineButton\n\n# Create a simple inline keyboard\nkeyboard = InlineKeyboard()\nkeyboard.add(\n    InlineButton(\"\ud83d\udc4d Like\", \"action:like\"),\n    InlineButton(\"\ud83d\udc4e Dislike\", \"action:dislike\"),\n    InlineButton(\"\ud83d\udcca Stats\", \"action:stats\")\n)\n\n# Use with Kurigram\nawait message.reply_text(\"What do you think?\", reply_markup=keyboard)\n</code></pre>"},{"location":"#reply-keyboard","title":"Reply Keyboard","text":"<pre><code>from pykeyboard import ReplyKeyboard, ReplyButton\n\n# Create a reply keyboard\nkeyboard = ReplyKeyboard(resize_keyboard=True, one_time_keyboard=True)\nkeyboard.add(\n    ReplyButton(\"Yes\"),\n    ReplyButton(\"No\"),\n    ReplyButton(\"Maybe\")\n)\n\n# Use with Kurigram\nawait message.reply_text(\"Choose an option:\", reply_markup=keyboard)\n</code></pre>"},{"location":"#perfect-for","title":"\ud83c\udfaf Perfect For","text":"<ul> <li>Telegram Bot Developers - Create beautiful, functional keyboards with ease</li> <li>E-commerce Bots - Product catalogs with pagination and search</li> <li>Menu-driven Interfaces - Complex navigation systems</li> <li>Multi-language Applications - Built-in language selection</li> <li>Form Handling - User input collection with reply keyboards</li> <li>Interactive Applications - Any bot requiring user interaction</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>PyKeyboard provides a clean, modular architecture:</p> <ul> <li>Core Classes: <code>InlineKeyboard</code>, <code>ReplyKeyboard</code>, <code>InlineButton</code>, <code>ReplyButton</code></li> <li>Builder Pattern: <code>KeyboardBuilder</code> for fluent API construction</li> <li>Factory Pattern: <code>KeyboardFactory</code> for common keyboard templates</li> <li>Localization: 50+ language support with automatic detection</li> </ul>"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"<ul> <li>\ud83d\udcd6 GitHub Repository - Source code and issues</li> <li>\ud83d\udcac GitHub Discussions - Community support</li> <li>\ud83d\udc1b Issue Tracker - Bug reports and feature requests</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE for details.</p> Made with \u2764\ufe0f for the Telegram bot development community"},{"location":"contributing/","title":"Contributing to PyKeyboard","text":"<p>We welcome contributions to PyKeyboard! This document provides guidelines and information for contributors.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Development Setup</li> <li>Code Style</li> <li>Testing</li> <li>Submitting Changes</li> <li>Reporting Issues</li> <li>Documentation</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Poetry for dependency management</li> <li>Git</li> </ul>"},{"location":"contributing/#fork-and-clone","title":"Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally:    <pre><code>git clone https://github.com/johnnie-610/pykeyboard.git\ncd pykeyboard\n</code></pre></p> </li> <li> <p>Set up the upstream remote:    <pre><code>git remote add upstream https://github.com/johnnie-610/pykeyboard.git\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<pre><code># Install Poetry if you don't have it\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install dependencies\npoetry install\n\n# Activate the virtual environment\npoetry shell\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a new branch for your feature:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes</p> </li> <li> <p>Run tests to ensure everything works:    <pre><code>poetry run pytest\n</code></pre></p> </li> <li> <p>Format your code:    <pre><code>poetry run black .\npoetry run isort .\n</code></pre></p> </li> <li> <p>Commit your changes:    <pre><code>git add .\ngit commit -m \"feat: add your feature description\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow these coding standards:</p>"},{"location":"contributing/#python-style","title":"Python Style","text":"<ul> <li>Black: Code formatting</li> <li>isort: Import sorting</li> </ul>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>We use conventional commits:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat</code>: New features - <code>fix</code>: Bug fixes - <code>docs</code>: Documentation - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Testing - <code>chore</code>: Maintenance</p>"},{"location":"contributing/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Classes: <code>PascalCase</code></li> <li>Functions/methods: <code>snake_case</code></li> <li>Constants: <code>UPPER_SNAKE_CASE</code></li> <li>Private attributes: <code>_single_leading_underscore</code></li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npoetry run pytest\n\n# Run with coverage\npoetry run pytest --cov=pykeyboard\n\n# Run specific test file\npoetry run pytest tests/test_inline_keyboard.py\n\n# Run tests in verbose mode\npoetry run pytest -v\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Use <code>pytest</code> framework</li> <li>Place tests in <code>tests/</code> directory</li> <li>Name test files as <code>test_*.py</code></li> <li>Use descriptive test function names</li> <li>Include docstrings for complex tests</li> </ul> <p>Example: <pre><code>def test_inline_keyboard_creation():\n    \"\"\"Test that InlineKeyboard can be created successfully.\"\"\"\n    keyboard = InlineKeyboard()\n    assert keyboard is not None\n    assert len(keyboard.keyboard) == 0\n</code></pre></p>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":""},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Ensure your branch is up to date:    <pre><code>git fetch upstream\ngit rebase upstream/main\n</code></pre></p> </li> <li> <p>Push your branch:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a Pull Request on GitHub</p> </li> <li> <p>Wait for review and address any feedback</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Provide a clear description of the changes</li> <li>Reference any related issues</li> <li>Include screenshots for UI changes</li> <li>Ensure all tests pass</li> <li>Update documentation if needed</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":""},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>When reporting bugs, please include:</p> <ul> <li>Description: Clear description of the issue</li> <li>Steps to reproduce: Step-by-step instructions</li> <li>Expected behavior: What should happen</li> <li>Actual behavior: What actually happens</li> <li>Environment: Python version, OS, PyKeyboard version, kurigram version</li> <li>Code sample: Minimal code to reproduce the issue</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>For feature requests, please include:</p> <ul> <li>Description: Clear description of the proposed feature</li> <li>Use case: Why this feature would be useful</li> <li>Implementation ideas: Any thoughts on how to implement it</li> <li>Alternatives: Any alternative solutions considered</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Install documentation dependencies\npoetry install --with docs\n\n# Build documentation\npoetry run mkdocs build\n\n# Serve documentation locally\npoetry run mkdocs serve\n</code></pre>"},{"location":"contributing/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples where appropriate</li> <li>Keep API documentation up to date</li> <li>Use proper Markdown formatting</li> <li>Include type hints in examples</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project follows a code of conduct to ensure a welcoming environment for all contributors. By participating, you agree to:</p> <ul> <li>Be respectful and inclusive</li> <li>Focus on constructive feedback</li> <li>Accept responsibility for mistakes</li> <li>Show empathy towards other contributors</li> <li>Help create a positive community</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to PyKeyboard, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<p>If you need help or have questions:</p> <ul> <li>Check the documentation</li> <li>Search existing issues</li> <li>Ask questions in discussions</li> </ul> <p>Thank you for contributing to PyKeyboard! \ud83c\udf89</p>"},{"location":"inline-keyboards/","title":"Inline Keyboards","text":"<p>Inline keyboards are the most powerful feature of PyKeyboard, providing rich interactive experiences for your Telegram bots.</p>"},{"location":"inline-keyboards/#basic-usage","title":"Basic Usage","text":"<pre><code>from pykeyboard import InlineKeyboard, InlineButton\n\n# Create keyboard\nkeyboard = InlineKeyboard()\n\n# Add buttons\nkeyboard.add(\n    InlineButton(\"Option 1\", \"choice:1\"),\n    InlineButton(\"Option 2\", \"choice:2\"),\n    InlineButton(\"Cancel\", \"action:cancel\")\n)\n\n# Send to user\nawait message.reply_text(\"Choose an option:\", reply_markup=keyboard)\n</code></pre> Example of inline keyboard with added buttons"},{"location":"inline-keyboards/#button-types","title":"Button Types","text":""},{"location":"inline-keyboards/#text-buttons","title":"Text Buttons","text":"<pre><code>InlineButton(\"Click me\", \"callback_data\")\n</code></pre>"},{"location":"inline-keyboards/#url-buttons","title":"URL Buttons","text":"<pre><code>InlineButton(\"Visit Website\", url=\"https://example.com\")\n</code></pre>"},{"location":"inline-keyboards/#web-app-buttons","title":"Web App Buttons","text":"<pre><code>from pyrogram.types import WebAppInfo\n\nbutton = InlineButton(\"Open Web App\", web_app=WebAppInfo(url=\"https://myapp.com\"))\n</code></pre>"},{"location":"inline-keyboards/#login-buttons","title":"Login Buttons","text":"<pre><code>from pyrogram.types import LoginUrl\n\nbutton = InlineButton(\"Login\", login_url=LoginUrl(url=\"https://example.com/login\"))\n</code></pre>"},{"location":"inline-keyboards/#layout-control","title":"Layout Control","text":""},{"location":"inline-keyboards/#row-width","title":"Row Width","text":"<pre><code># 2 buttons per row\nkeyboard = InlineKeyboard(row_width=2)\nkeyboard.add(\"A\", \"B\", \"C\", \"D\")  # Creates 2 rows: [A,B], [C,D]\n</code></pre>"},{"location":"inline-keyboards/#manual-rows","title":"Manual Rows","text":"<pre><code>keyboard = InlineKeyboard()\nkeyboard.row(\"Button 1\", \"Button 2\")  # First row\nkeyboard.row(\"Button 3\")              # Second row\nkeyboard.add(\"Button 4\", \"Button 5\")  # Third row (auto-layout)\n</code></pre> Example of inline keyboard with row-based layout"},{"location":"inline-keyboards/#advanced-features","title":"Advanced Features","text":""},{"location":"inline-keyboards/#pagination","title":"Pagination","text":"<pre><code>keyboard = InlineKeyboard()\nkeyboard.paginate(\n    count_pages=25,\n    current_page=12,\n    callback_pattern=\"page:{number}\"\n)\n# Creates: \u00ab 1 \u2039 11 \u00b7 12 \u00b7 13 \u203a 25 \u00bb\n</code></pre> Pagination with 25 pages, current page 14"},{"location":"inline-keyboards/#different-page-counts","title":"Different Page Counts","text":"<p>3 Pages: <pre><code>keyboard = InlineKeyboard()\nkeyboard.paginate(3, 2, 'pagination:{number}')\n</code></pre></p> Pagination with 3 pages, current page 3 <p>5 Pages: <pre><code>keyboard = InlineKeyboard()\nkeyboard.paginate(5, 3, 'pagination:{number}')\n</code></pre></p> Pagination with 5 pages, current page 3 <p>9 Pages: <pre><code>keyboard = InlineKeyboard()\nkeyboard.paginate(9, 5, 'pagination:{number}')\n</code></pre></p> Pagination with 9 pages, current page 5 <p>100 Pages: <pre><code>keyboard = InlineKeyboard()\nkeyboard.paginate(100, 50, 'page:{number}')\n</code></pre></p> Pagination with 100 pages, current page 100 <p>150 Pages with Additional Buttons: <pre><code>keyboard = InlineKeyboard()\nkeyboard.paginate(150, 75, 'page:{number}')\nkeyboard.row(\n    InlineButton('\ud83d\udd19 Back', 'action:back'),\n    InlineButton('\u274c Close', 'action:close')\n)\n</code></pre></p> Pagination with 150 pages and additional action buttons"},{"location":"inline-keyboards/#language-selection","title":"Language Selection","text":"<pre><code>keyboard = InlineKeyboard()\nkeyboard.languages(\n    callback_pattern=\"lang:{locale}\",\n    locales=[\"en_US\", \"es_ES\", \"fr_FR\", \"de_DE\"],\n    row_width=2\n)\n</code></pre> Language selection keyboard with multiple locales"},{"location":"inline-keyboards/#builder-pattern","title":"Builder Pattern","text":"<pre><code>from pykeyboard import KeyboardBuilder\n\nbuilder = KeyboardBuilder(InlineKeyboard())\nkeyboard = (builder\n    .add_button(\"Yes\", \"yes\")\n    .add_button(\"No\", \"no\")\n    .add_row(\"Maybe\", \"Cancel\")\n    .build())\n</code></pre>"},{"location":"inline-keyboards/#best-practices","title":"Best Practices","text":""},{"location":"inline-keyboards/#callback-data-patterns","title":"Callback Data Patterns","text":"<pre><code># Good: Structured callback data\nInlineButton(\"Edit\", \"action:edit:item:123\")\n\n# Bad: Unstructured data\nInlineButton(\"Edit\", \"edit_item_123\")\n</code></pre>"},{"location":"inline-keyboards/#error-handling","title":"Error Handling","text":"<pre><code>from pykeyboard import PaginationUnchangedError\n\ntry:\n    await callback_query.edit_message_text(\"Updated!\")\nexcept PaginationUnchangedError as e:\n    # Handle MessageNotModifiedError, etc.\n    await callback_query.answer(\"Already updated\")\n</code></pre>"},{"location":"inline-keyboards/#common-patterns","title":"Common Patterns","text":""},{"location":"inline-keyboards/#confirmation-dialog","title":"Confirmation Dialog","text":"<pre><code>from pykeyboard import KeyboardFactory\n\nkeyboard = KeyboardFactory.create_confirmation_keyboard(\n    yes_text=\"\u2705 Confirm\",\n    no_text=\"\u274c Cancel\",\n    callback_pattern=\"confirm:{action}\"\n)\n</code></pre>"},{"location":"inline-keyboards/#menu-navigation","title":"Menu Navigation","text":"<pre><code>def create_menu(items, callback_prefix):\n    keyboard = InlineKeyboard(row_width=2)\n    for item in items:\n        keyboard.add(InlineButton(item['name'], f\"{callback_prefix}:{item['id']}\"))\n    return keyboard\n</code></pre>"},{"location":"inline-keyboards/#dynamic-updates","title":"Dynamic Updates","text":"<pre><code>@app.on_callback_query(filters.regex(r\"counter:(\\w+)\"))\nasync def handle_counter(client, callback_query):\n    action = callback_query.matches[0].group(1)\n\n    # Update counter in database\n    new_count = update_counter(action)\n\n    # Update keyboard with new data\n    keyboard = create_counter_keyboard(new_count)\n    await callback_query.edit_message_reply_markup(keyboard)\n</code></pre>"},{"location":"inline-keyboards/#troubleshooting","title":"Troubleshooting","text":""},{"location":"inline-keyboards/#paginationunchangederror","title":"PaginationUnchangedError","text":"<pre><code>keyboard.paginate(5, 1, \"page:{number}\", \"user_123\")  # Safe to call multiple times\n</code></pre>"},{"location":"inline-keyboards/#callback-timeout","title":"Callback Timeout","text":"<pre><code># Always answer callbacks quickly\nawait callback_query.answer()  # Answer immediately\n\n# Then do heavy processing\nawait do_heavy_work()\n\n# Finally update message\nawait callback_query.edit_message_text(\"Done!\")\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>PyKeyboard is available on PyPI and can be installed using pip or poetry.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or higher</li> <li>Kurigram (automatically installed)</li> </ul>"},{"location":"installation/#install-with-pip","title":"Install with pip","text":"<pre><code>pip install pykeyboard-kurigram\n</code></pre>"},{"location":"installation/#install-with-poetry","title":"Install with poetry","text":"<pre><code>poetry add pykeyboard-kurigram\n</code></pre>"},{"location":"installation/#install-from-source","title":"Install from source","text":"<pre><code>git clone https://github.com/johnnie-610/pykeyboard.git\ncd pykeyboard\npip install -e .\n</code></pre>"},{"location":"installation/#development-setup","title":"Development Setup","text":"<p>For development and testing:</p> <pre><code>git clone https://github.com/johnnie-610/pykeyboard.git\ncd pykeyboard\npoetry install\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>PyKeyboard has minimal dependencies:</p> <ul> <li><code>pydantic &gt;= 2.11.7</code> - Type validation</li> <li><code>kurigram &gt;= 2.2.10</code> - Telegram bot framework</li> </ul> <p>Optional dependencies:</p> <ul> <li><code>pyyaml</code> - YAML export/import support</li> <li><code>TgCrypto</code> - Faster Pyrogram performance (recommended)</li> </ul>"},{"location":"installation/#verification","title":"Verification","text":"<p>After installation, verify PyKeyboard is working:</p> <pre><code>import pykeyboard\n\n# Check version\nprint(pykeyboard.__version__)\n\n# Quick test\nfrom pykeyboard import InlineKeyboard, InlineButton\n\nkeyboard = InlineKeyboard()\nkeyboard.add(InlineButton(\"Test\", \"test\"))\nprint(\"\u2705 PyKeyboard is working!\")\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#import-error","title":"Import Error","text":"<p>If you get import errors, make sure you're using Python 3.9+:</p> <pre><code>python --version\n</code></pre>"},{"location":"installation/#kurigram-issues","title":"Kurigram Issues","text":"<p>PyKeyboard requires Kurigram. If you have import issues:</p> <pre><code>pip install kurigram\n</code></pre>"},{"location":"installation/#tgcrypto-warning","title":"TgCrypto Warning","text":"<p>You might see a warning about TgCrypto missing. This is optional but recommended:</p> <pre><code>pip install TgCrypto\n</code></pre> <p>This will improve Pyrogram's performance but is not required for PyKeyboard to work.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Get up and running with PyKeyboard in 5 minutes.</p>"},{"location":"quickstart/#basic-setup","title":"Basic Setup","text":"<p>First, install PyKeyboard:</p> <pre><code>pip install pykeyboard-kurigram\n</code></pre>"},{"location":"quickstart/#your-first-keyboard","title":"Your First Keyboard","text":"<pre><code>from pykeyboard import InlineKeyboard, InlineButton\n\n# Create a keyboard\nkeyboard = InlineKeyboard()\nkeyboard.add(\n    InlineButton(\"\ud83d\udc4d Like\", \"action:like\"),\n    InlineButton(\"\ud83d\udc4e Dislike\", \"action:dislike\"),\n    InlineButton(\"\ud83d\udcca Stats\", \"action:stats\")\n)\n\n# Use with Kurigram\nawait message.reply_text(\"What do you think?\", reply_markup=keyboard)\n</code></pre>"},{"location":"quickstart/#handling-callbacks","title":"Handling Callbacks","text":"<pre><code>from pyrogram import Client, filters\n\napp = Client(\"my_bot\", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)\n\n@app.on_callback_query(filters.regex(\"action:like\"))\nasync def handle_like(client, callback_query):\n    await callback_query.answer(\"You liked it! \ud83d\udc4d\")\n    # Update your database, etc.\n\n@app.on_callback_query(filters.regex(\"action:dislike\"))\nasync def handle_dislike(client, callback_query):\n    await callback_query.answer(\"You disliked it! \ud83d\udc4e\")\n\n@app.on_callback_query(filters.regex(\"action:stats\"))\nasync def handle_stats(client, callback_query):\n    stats = get_stats()  # Your stats function\n    await callback_query.edit_message_text(f\"\ud83d\udcca Stats: {stats}\")\n</code></pre>"},{"location":"quickstart/#reply-keyboards","title":"Reply Keyboards","text":"<pre><code>from pykeyboard import ReplyKeyboard, ReplyButton\n\n# Create a reply keyboard\nkeyboard = ReplyKeyboard(resize_keyboard=True, one_time_keyboard=True)\nkeyboard.add(\n    ReplyButton(\"\ud83d\udcf1 Share Phone\", request_contact=True),\n    ReplyButton(\"\ud83d\udccd Share Location\", request_location=True),\n    ReplyButton(\"\u274c Cancel\")\n)\n\nawait message.reply_text(\"Please share your contact:\", reply_markup=keyboard)\n</code></pre>"},{"location":"quickstart/#advanced-features","title":"Advanced Features","text":""},{"location":"quickstart/#pagination","title":"Pagination","text":"<pre><code>keyboard = InlineKeyboard()\nkeyboard.paginate(\n    count_pages=10,\n    current_page=1,\n    callback_pattern=\"page:{number}\"\n)\n</code></pre>"},{"location":"quickstart/#language-selection","title":"Language Selection","text":"<pre><code>keyboard = InlineKeyboard()\nkeyboard.languages(\n    callback_pattern=\"lang:{locale}\",\n    locales=[\"en_US\", \"es_ES\", \"fr_FR\"]\n)\n</code></pre>"},{"location":"quickstart/#builder-pattern","title":"Builder Pattern","text":"<pre><code>from pykeyboard import KeyboardBuilder\n\nbuilder = KeyboardBuilder(InlineKeyboard())\nkeyboard = (builder\n    .add_button(\"Yes\", \"yes\")\n    .add_button(\"No\", \"no\")\n    .add_row(\"Maybe\", \"cancel\")\n    .build())\n</code></pre>"},{"location":"quickstart/#complete-example","title":"Complete Example","text":"<pre><code>from pyrogram import Client, filters\nfrom pykeyboard import InlineKeyboard, InlineButton\n\n# Bot setup\napp = Client(\"my_bot\", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)\n\n@app.on_message(filters.command(\"start\"))\nasync def start(client, message):\n    keyboard = InlineKeyboard()\n    keyboard.add(\n        InlineButton(\"\ud83c\udfae Play Game\", \"game\"),\n        InlineButton(\"\u2139\ufe0f About\", \"about\"),\n        InlineButton(\"\u2699\ufe0f Settings\", \"settings\")\n    )\n\n    await message.reply_text(\n        \"Welcome to My Bot! Choose an option:\",\n        reply_markup=keyboard\n    )\n\n@app.on_callback_query(filters.regex(\"game\"))\nasync def game_callback(client, callback_query):\n    await callback_query.edit_message_text(\"\ud83c\udfae Game starting...\")\n\n@app.on_callback_query(filters.regex(\"about\"))\nasync def about_callback(client, callback_query):\n    await callback_query.edit_message_text(\"\u2139\ufe0f This is a demo bot using PyKeyboard!\")\n\n@app.on_callback_query(filters.regex(\"settings\"))\nasync def settings_callback(client, callback_query):\n    keyboard = InlineKeyboard()\n    keyboard.add(\n        InlineButton(\"\ud83c\udf10 Language\", \"lang\"),\n        InlineButton(\"\ud83d\udd14 Notifications\", \"notif\"),\n        InlineButton(\"\u2b05\ufe0f Back\", \"back\")\n    )\n\n    await callback_query.edit_message_text(\n        \"\u2699\ufe0f Settings:\",\n        reply_markup=keyboard\n    )\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the examples for more advanced usage</li> <li>Read the API documentation for detailed reference</li> <li>Explore pagination and language selection features</li> <li>Join our GitHub Discussions for community support</li> </ul>"},{"location":"reply-keyboards/","title":"Reply Keyboards","text":"<p>Reply keyboards are shown at the bottom of the chat interface and allow users to send predefined responses by tapping buttons.</p>"},{"location":"reply-keyboards/#basic-usage","title":"Basic Usage","text":"<pre><code>from pykeyboard import ReplyKeyboard, ReplyButton\n\n# Create a simple reply keyboard\nkeyboard = ReplyKeyboard()\nkeyboard.add(\n    ReplyButton(\"Yes\"),\n    ReplyButton(\"No\"),\n    ReplyButton(\"Maybe\")\n)\n\n# Use with your bot\nawait message.reply_text(\"What do you think?\", reply_markup=keyboard)\n</code></pre> Example of reply keyboard with added buttons"},{"location":"reply-keyboards/#parameters","title":"Parameters","text":"<ul> <li><code>row_width</code> (int, default 3): Number of buttons per row</li> <li><code>resize_keyboard</code> (bool, optional): Whether to resize keyboard to fit content</li> <li><code>one_time_keyboard</code> (bool, optional): Whether keyboard disappears after one use</li> <li><code>selective</code> (bool, optional): Whether keyboard is shown only to specific users</li> <li><code>placeholder</code> (str, optional): Placeholder text shown in input field</li> </ul>"},{"location":"reply-keyboards/#advanced-features","title":"Advanced Features","text":""},{"location":"reply-keyboards/#contact-and-location-requests","title":"Contact and Location Requests","text":"<pre><code>keyboard = ReplyKeyboard(resize_keyboard=True)\nkeyboard.row(\n    ReplyButton(\"\ud83d\udcf1 Share Contact\", request_contact=True),\n    ReplyButton(\"\ud83d\udccd Share Location\", request_location=True)\n)\nkeyboard.row(ReplyButton(\"\u274c Cancel\"))\n</code></pre>"},{"location":"reply-keyboards/#poll-creation","title":"Poll Creation","text":"<pre><code>keyboard = ReplyKeyboard()\nkeyboard.add(\n    ReplyButton(\"\ud83d\udcca Create Quiz\", request_poll=KeyboardButtonPollType(type=\"quiz\")),\n    ReplyButton(\"\ud83d\udcc8 Create Poll\", request_poll=KeyboardButtonPollType(type=\"regular\"))\n)\n</code></pre>"},{"location":"reply-keyboards/#user-and-chat-selection","title":"User and Chat Selection","text":"<pre><code>from pyrogram.types import KeyboardButtonRequestUsers, KeyboardButtonRequestChat\n\nkeyboard = ReplyKeyboard()\nkeyboard.add(\n    ReplyButton(\"\ud83d\udc64 Select User\", request_users=KeyboardButtonRequestUsers(request_id=1)),\n    ReplyButton(\"\ud83d\udc65 Select Chat\", request_chat=KeyboardButtonRequestChat(request_id=2))\n)\n</code></pre>"},{"location":"reply-keyboards/#web-app-integration","title":"Web App Integration","text":"<pre><code>from pyrogram.types import WebAppInfo\n\nkeyboard = ReplyKeyboard()\nkeyboard.add(\n    ReplyButton(\"\ud83c\udf10 Open Web App\", web_app=WebAppInfo(url=\"https://example.com\"))\n)\n</code></pre>"},{"location":"reply-keyboards/#layout-control","title":"Layout Control","text":""},{"location":"reply-keyboards/#row-based-layout","title":"Row-based Layout","text":"<pre><code>keyboard = ReplyKeyboard()\nkeyboard.row(ReplyButton(\"Top Button\"))\nkeyboard.row(\n    ReplyButton(\"Left\"),\n    ReplyButton(\"Right\")\n)\nkeyboard.row(ReplyButton(\"Bottom Button\"))\n</code></pre> Example of reply keyboard with row-based layout"},{"location":"reply-keyboards/#automatic-layout","title":"Automatic Layout","text":"<pre><code>keyboard = ReplyKeyboard(row_width=2)\nkeyboard.add(\n    ReplyButton(\"Button 1\"),\n    ReplyButton(\"Button 2\"),\n    ReplyButton(\"Button 3\"),\n    ReplyButton(\"Button 4\"),\n    ReplyButton(\"Button 5\")  # Will be on its own row\n)\n</code></pre>"},{"location":"reply-keyboards/#keyboard-types","title":"Keyboard Types","text":""},{"location":"reply-keyboards/#one-time-keyboard","title":"One-time Keyboard","text":"<pre><code>keyboard = ReplyKeyboard(\n    one_time_keyboard=True,\n    placeholder=\"Choose an option...\"\n)\nkeyboard.add(ReplyButton(\"Option 1\"), ReplyButton(\"Option 2\"))\n</code></pre>"},{"location":"reply-keyboards/#resizable-keyboard","title":"Resizable Keyboard","text":"<pre><code>keyboard = ReplyKeyboard(resize_keyboard=True)\nkeyboard.add(ReplyButton(\"Small Button\"))\n</code></pre>"},{"location":"reply-keyboards/#selective-keyboard","title":"Selective Keyboard","text":"<pre><code>keyboard = ReplyKeyboard(selective=True)\nkeyboard.add(ReplyButton(\"For You Only\"))\n</code></pre>"},{"location":"reply-keyboards/#integration-examples","title":"Integration Examples","text":""},{"location":"reply-keyboards/#complete-bot-example","title":"Complete Bot Example","text":"<pre><code>from pyrogram import Client, filters\nfrom pykeyboard import ReplyKeyboard, ReplyButton\n\napp = Client(\"my_bot\")\n\n# Main menu keyboard\nmain_menu = ReplyKeyboard(resize_keyboard=True, one_time_keyboard=True)\nmain_menu.add(\n    ReplyButton(\"\ud83d\udccb Tasks\"),\n    ReplyButton(\"\ud83d\udcca Statistics\"),\n    ReplyButton(\"\u2699\ufe0f Settings\")\n)\n\n# Settings keyboard\nsettings_menu = ReplyKeyboard(resize_keyboard=True)\nsettings_menu.row(\n    ReplyButton(\"\ud83d\udd14 Notifications\"),\n    ReplyButton(\"\ud83c\udf10 Language\")\n)\nsettings_menu.row(ReplyButton(\"\u2b05\ufe0f Back\"))\n\n@app.on_message(filters.command(\"start\"))\nasync def start_command(client, message):\n    await message.reply_text(\n        \"Welcome! Choose an option:\",\n        reply_markup=main_menu\n    )\n\n@app.on_message(filters.text &amp; filters.regex(\"Settings\"))\nasync def settings_handler(client, message):\n    await message.reply_text(\n        \"Settings:\",\n        reply_markup=settings_menu\n    )\n\napp.run()\n</code></pre>"},{"location":"reply-keyboards/#contact-collection","title":"Contact Collection","text":"<pre><code>contact_keyboard = ReplyKeyboard(resize_keyboard=True)\ncontact_keyboard.row(\n    ReplyButton(\"\ud83d\udcf1 Share Contact\", request_contact=True)\n)\ncontact_keyboard.row(ReplyButton(\"Skip\"))\n\n@app.on_message(filters.contact)\nasync def contact_handler(client, message):\n    contact = message.contact\n    await message.reply_text(f\"Thanks! Phone: {contact.phone_number}\")\n\n@app.on_message(filters.text &amp; filters.regex(\"Share Contact\"))\nasync def request_contact(client, message):\n    await message.reply_text(\n        \"Please share your contact:\",\n        reply_markup=contact_keyboard\n    )\n</code></pre>"},{"location":"reply-keyboards/#best-practices","title":"Best Practices","text":"<ol> <li>Use appropriate keyboard types: One-time keyboards for menus, persistent for ongoing interactions</li> <li>Keep it simple: Don't overload users with too many options</li> <li>Use emojis: They make buttons more recognizable</li> <li>Handle all responses: Make sure your bot can handle all possible button presses</li> <li>Consider mobile: Test on mobile devices as button layout may differ</li> </ol>"},{"location":"reply-keyboards/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    keyboard = ReplyKeyboard(row_width=0)  # Invalid\nexcept ValueError as e:\n    print(f\"Keyboard error: {e}\")\n\n# Always check if keyboard was created successfully\nif keyboard:\n    await message.reply_text(\"Choose:\", reply_markup=keyboard)\n</code></pre>"},{"location":"api/builder/","title":"Builder API Reference","text":""},{"location":"api/builder/#class-keyboardbuilder","title":"Class: KeyboardBuilder","text":"<p>Fluent API builder for type-safe keyboard construction.</p>"},{"location":"api/builder/#constructor","title":"Constructor","text":"<pre><code>KeyboardBuilder(keyboard: Union[InlineKeyboard, ReplyKeyboard])\n</code></pre>"},{"location":"api/builder/#methods","title":"Methods","text":""},{"location":"api/builder/#add_validation_hookhook","title":"add_validation_hook(hook)","text":"<p>Add a validation hook that runs before adding buttons.</p> <p>Parameters: - <code>hook</code> (Callable[[Any], bool]): Function that takes a button and returns True if valid</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#add_button_transformtransform","title":"add_button_transform(transform)","text":"<p>Add a button transformation function.</p> <p>Parameters: - <code>transform</code> (Callable[[Any], Any]): Function that takes a button and returns transformed button</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#add_buttontext-callback_datanone-kwargs","title":"add_button(text, callback_data=None, **kwargs)","text":"<p>Add a single button to the keyboard.</p> <p>Parameters: - <code>text</code> (str): Button text - <code>callback_data</code> (Optional[str]): Callback data (for inline keyboards) - <code>**kwargs</code>: Additional button parameters</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#add_buttonsbuttons","title":"add_buttons(*buttons)","text":"<p>Add multiple buttons at once.</p> <p>Parameters: - <code>*buttons</code> (Union[str, Dict[str, Any], Any]): Button specifications (strings, dicts, or button objects)</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#add_rowbuttons","title":"add_row(*buttons)","text":"<p>Add a complete row of buttons.</p> <p>Parameters: - <code>*buttons</code> (Union[str, Dict[str, Any], Any]): Button specifications for the row</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#add_conditional_buttoncondition-text-callback_datanone-kwargs","title":"add_conditional_button(condition, text, callback_data=None, **kwargs)","text":"<p>Add a button only if condition is True.</p> <p>Parameters: - <code>condition</code> (bool): Whether to add the button - <code>text</code> (str): Button text - <code>callback_data</code> (Optional[str]): Callback data - <code>**kwargs</code>: Additional button parameters</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#add_paginated_buttonsitems-callback_pattern-items_per_page5-current_page1","title":"add_paginated_buttons(items, callback_pattern, items_per_page=5, current_page=1)","text":"<p>Add paginated buttons from a list of items.</p> <p>Parameters: - <code>items</code> (List[str]): List of item texts - <code>callback_pattern</code> (str): Pattern for callback data with {item} and {page} placeholders - <code>items_per_page</code> (int): Number of items per page - <code>current_page</code> (int): Current page number</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#add_navigation_buttonstotal_pages-current_page-callback_patternpage_number","title":"add_navigation_buttons(total_pages, current_page, callback_pattern=\"page_{number}\")","text":"<p>Add navigation buttons for pagination.</p> <p>Parameters: - <code>total_pages</code> (int): Total number of pages - <code>current_page</code> (int): Current page number - <code>callback_pattern</code> (str): Pattern for callback data</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#add_language_buttonslocales-callback_patternlang_locale-row_width2","title":"add_language_buttons(locales, callback_pattern=\"lang_{locale}\", row_width=2)","text":"<p>Add language selection buttons.</p> <p>Parameters: - <code>locales</code> (List[str]): List of locale codes - <code>callback_pattern</code> (str): Pattern for callback data - <code>row_width</code> (int): Number of buttons per row</p> <p>Returns: - <code>KeyboardBuilder</code>: Self for method chaining</p>"},{"location":"api/builder/#build","title":"build()","text":"<p>Build and return the final keyboard.</p> <p>Returns: - <code>Union[InlineKeyboard, ReplyKeyboard]</code>: The constructed keyboard</p>"},{"location":"api/builder/#class-keyboardfactory","title":"Class: KeyboardFactory","text":"<p>Factory class for creating keyboards with predefined configurations.</p>"},{"location":"api/builder/#methods_1","title":"Methods","text":""},{"location":"api/builder/#create_confirmation_keyboardyes_text-yes-no_text-no-cancel_textnone-callback_patternconfirm_action-columns2","title":"create_confirmation_keyboard(yes_text=\"\u2705 Yes\", no_text=\"\u274c No\", cancel_text=None, callback_pattern=\"confirm_{action}\", columns=2)","text":"<p>Create a confirmation dialog keyboard.</p> <p>Parameters: - <code>yes_text</code> (str): Text for yes button - <code>no_text</code> (str): Text for no button - <code>cancel_text</code> (Optional[str]): Text for cancel button (optional) - <code>callback_pattern</code> (str): Pattern for callback data - <code>columns</code> (int): Row width of the keyboard</p> <p>Returns: - <code>InlineKeyboard</code>: Configured InlineKeyboard</p>"},{"location":"api/builder/#create_menu_keyboardmenu_items-callback_patternmenu_action-columns2","title":"create_menu_keyboard(menu_items, callback_pattern=\"menu_{action}\", columns=2)","text":"<p>Create a menu keyboard from a dictionary of items.</p> <p>Parameters: - <code>menu_items</code> (Dict[str, str]): Dict mapping button text to action - <code>callback_pattern</code> (str): Pattern for callback data - <code>columns</code> (int): Number of columns</p> <p>Returns: - <code>InlineKeyboard</code>: Configured InlineKeyboard</p>"},{"location":"api/builder/#create_rating_keyboardmax_rating5-callback_patternrate_stars-include_labelstrue","title":"create_rating_keyboard(max_rating=5, callback_pattern=\"rate_{stars}\", include_labels=True)","text":"<p>Create a star rating keyboard.</p> <p>Parameters: - <code>max_rating</code> (int): Maximum rating value - <code>callback_pattern</code> (str): Pattern for callback data - <code>include_labels</code> (bool): Whether to include rating labels</p> <p>Returns: - <code>InlineKeyboard</code>: Configured InlineKeyboard</p>"},{"location":"api/builder/#create_pagination_keyboardtotal_pages-current_page-callback_patternpage_number-include_buttonsnone","title":"create_pagination_keyboard(total_pages, current_page, callback_pattern=\"page_{number}\", include_buttons=None)","text":"<p>Create a pagination keyboard with optional additional buttons.</p> <p>Parameters: - <code>total_pages</code> (int): Total number of pages - <code>current_page</code> (int): Current page number - <code>callback_pattern</code> (str): Pattern for pagination callbacks - <code>include_buttons</code> (Optional[List[Dict[str, str]]]): Additional buttons to include</p> <p>Returns: - <code>InlineKeyboard</code>: Configured InlineKeyboard</p>"},{"location":"api/builder/#create_language_keyboardlocales-callback_patternlang_locale-row_width2","title":"create_language_keyboard(locales, callback_pattern=\"lang_{locale}\", row_width=2)","text":"<p>Create a language selection keyboard.</p> <p>Parameters: - <code>locales</code> (List[str]): List of locale codes - <code>callback_pattern</code> (str): Pattern for callback data - <code>row_width</code> (int): Number of buttons per row</p> <p>Returns: - <code>InlineKeyboard</code>: Configured InlineKeyboard</p>"},{"location":"api/builder/#clone_keyboardsource_keyboard-deep_copytrue","title":"clone_keyboard(source_keyboard, deep_copy=True)","text":"<p>Clone an existing keyboard.</p> <p>Parameters: - <code>source_keyboard</code> (Union[InlineKeyboard, ReplyKeyboard]): Keyboard to clone - <code>deep_copy</code> (bool): Whether to perform deep copy</p> <p>Returns: - <code>Union[InlineKeyboard, ReplyKeyboard]</code>: Cloned keyboard instance</p>"},{"location":"api/builder/#functions","title":"Functions","text":""},{"location":"api/builder/#build_inline_keyboard","title":"build_inline_keyboard()","text":"<p>Create a builder for inline keyboards.</p> <p>Returns: - <code>KeyboardBuilder</code>: Builder instance for InlineKeyboard</p>"},{"location":"api/builder/#build_reply_keyboard","title":"build_reply_keyboard()","text":"<p>Create a builder for reply keyboards.</p> <p>Returns: - <code>KeyboardBuilder</code>: Builder instance for ReplyKeyboard</p>"},{"location":"api/builder/#decorators","title":"Decorators","text":""},{"location":"api/builder/#keyboard_factoryfunc","title":"keyboard_factory(func)","text":"<p>Decorator to mark functions as keyboard factories.</p> <p>Parameters: - <code>func</code> (Callable): Function to decorate</p> <p>Returns: - <code>Callable</code>: Decorated function with additional validation and error handling</p>"},{"location":"api/buttons/","title":"Buttons API Reference","text":""},{"location":"api/buttons/#class-button","title":"Class: Button","text":"<p>Base button model with text validation.</p>"},{"location":"api/buttons/#constructor","title":"Constructor","text":"<pre><code>Button(text: str)\n</code></pre>"},{"location":"api/buttons/#attributes","title":"Attributes","text":"<ul> <li><code>text</code> (str): The display text for the button. Must be a non-empty string.</li> </ul>"},{"location":"api/buttons/#validation","title":"Validation","text":"<ul> <li>Text cannot be empty or whitespace-only</li> <li>Raises <code>ValidationError</code> if validation fails</li> </ul>"},{"location":"api/buttons/#class-inlinebutton","title":"Class: InlineButton","text":"<p>Inline keyboard button with comprehensive Pyrogram integration.</p>"},{"location":"api/buttons/#constructor_1","title":"Constructor","text":"<pre><code>InlineButton(\n    text: str,\n    callback_data: Optional[Union[str, bytes]] = None,\n    url: Optional[str] = None,\n    web_app: Optional[WebAppInfo] = None,\n    login_url: Optional[LoginUrl] = None,\n    user_id: Optional[int] = None,\n    switch_inline_query: Optional[str] = None,\n    switch_inline_query_current_chat: Optional[str] = None,\n    callback_game: Optional[CallbackGame] = None,\n    requires_password: Optional[bool] = None,\n    pay: Optional[bool] = None,\n    copy_text: Optional[str] = None\n)\n</code></pre>"},{"location":"api/buttons/#attributes_1","title":"Attributes","text":"<ul> <li><code>text</code> (str): Button display text (inherited from Button)</li> <li><code>callback_data</code> (Optional[Union[str, bytes]]): Callback data sent when button is pressed</li> <li><code>url</code> (Optional[str]): URL to open when button is pressed</li> <li><code>web_app</code> (Optional[WebAppInfo]): Web app to open</li> <li><code>login_url</code> (Optional[LoginUrl]): Login URL for authorization</li> <li><code>user_id</code> (Optional[int]): User ID for the button</li> <li><code>switch_inline_query</code> (Optional[str]): Switch to inline query</li> <li><code>switch_inline_query_current_chat</code> (Optional[str]): Switch to inline query in current chat</li> <li><code>callback_game</code> (Optional[CallbackGame]): Callback game</li> <li><code>requires_password</code> (Optional[bool]): Whether password is required</li> <li><code>pay</code> (Optional[bool]): Whether this is a pay button</li> <li><code>copy_text</code> (Optional[str]): Text to copy to clipboard</li> </ul>"},{"location":"api/buttons/#methods","title":"Methods","text":""},{"location":"api/buttons/#to_pyrogram","title":"to_pyrogram()","text":"<p>Convert to Pyrogram InlineKeyboardButton.</p> <p>Returns: - <code>InlineKeyboardButton</code>: Pyrogram-compatible button instance</p>"},{"location":"api/buttons/#notes","title":"Notes","text":"<ul> <li>Only one of the optional fields should be used per button for optimal UX</li> <li>Supports both positional and keyword arguments (positional deprecated)</li> </ul>"},{"location":"api/buttons/#class-replybutton","title":"Class: ReplyButton","text":"<p>Reply keyboard button with comprehensive Pyrogram integration and advanced features.</p>"},{"location":"api/buttons/#constructor_2","title":"Constructor","text":"<pre><code>ReplyButton(\n    text: str,\n    request_contact: Optional[bool] = None,\n    request_location: Optional[bool] = None,\n    request_poll: Optional[KeyboardButtonPollType] = None,\n    request_users: Optional[KeyboardButtonRequestUsers] = None,\n    request_chat: Optional[KeyboardButtonRequestChat] = None,\n    web_app: Optional[WebAppInfo] = None\n)\n</code></pre>"},{"location":"api/buttons/#attributes_2","title":"Attributes","text":"<ul> <li><code>text</code> (str): Button display text (inherited from Button)</li> <li><code>request_contact</code> (Optional[bool]): Request user's contact information when pressed</li> <li><code>request_location</code> (Optional[bool]): Request user's location when pressed</li> <li><code>request_poll</code> (Optional[KeyboardButtonPollType]): Request poll creation with specified type</li> <li><code>request_users</code> (Optional[KeyboardButtonRequestUsers]): Request user selection with specified criteria</li> <li><code>request_chat</code> (Optional[KeyboardButtonRequestChat]): Request chat selection with specified criteria</li> <li><code>web_app</code> (Optional[WebAppInfo]): Web app to open when button is pressed</li> </ul>"},{"location":"api/buttons/#methods_1","title":"Methods","text":""},{"location":"api/buttons/#to_pyrogram_1","title":"to_pyrogram()","text":"<p>Convert to Pyrogram KeyboardButton.</p> <p>Returns: - <code>KeyboardButton</code>: Pyrogram-compatible button instance</p>"},{"location":"api/buttons/#notes_1","title":"Notes","text":"<ul> <li>Only one request_* field should be set per button for optimal UX</li> <li>Supports both positional and keyword arguments (positional deprecated)</li> </ul>"},{"location":"api/inline-keyboard/","title":"InlineKeyboard API Reference","text":""},{"location":"api/inline-keyboard/#class-inlinekeyboard","title":"Class: InlineKeyboard","text":"<p>Advanced inline keyboard with pagination and language selection support.</p>"},{"location":"api/inline-keyboard/#constructor","title":"Constructor","text":"<pre><code>InlineKeyboard(\n    row_width: int = 3,\n    callback_pattern: str = \"\",\n    count_pages: int = 0,\n    current_page: int = 0,\n    custom_locales: Dict[str, str] = None\n)\n</code></pre>"},{"location":"api/inline-keyboard/#attributes","title":"Attributes","text":"<ul> <li><code>row_width</code> (int): Number of buttons per row (default: 3)</li> <li><code>callback_pattern</code> (str): Pattern for callback data</li> <li><code>count_pages</code> (int): Total number of pages</li> <li><code>current_page</code> (int): Current page number</li> <li><code>custom_locales</code> (Dict[str, str]): User-defined custom locales</li> </ul>"},{"location":"api/inline-keyboard/#methods","title":"Methods","text":""},{"location":"api/inline-keyboard/#paginatecount_pages-current_page-callback_pattern-sourcenone","title":"paginate(count_pages, current_page, callback_pattern, source=None)","text":"<p>Create pagination keyboard with comprehensive edge case handling and automatic duplicate prevention.</p> <p>Parameters: - <code>count_pages</code> (int): Total number of pages. Must be &gt;= 1. - <code>current_page</code> (int): The page number currently being viewed. Must be &gt;= 1. - <code>callback_pattern</code> (str): The pattern used for callback data. Must contain '{number}' placeholder. - <code>source</code> (Optional[str]): Source identifier for isolation in multi-client scenarios.</p> <p>Raises: - <code>PaginationError</code>: If pagination parameters are invalid. - <code>PaginationUnchangedError</code>: If identical keyboard was already created for this source.</p>"},{"location":"api/inline-keyboard/#languagescallback_pattern-locales-row_width2","title":"languages(callback_pattern, locales, row_width=2)","text":"<p>Create language selection keyboard with comprehensive validation.</p> <p>Parameters: - <code>callback_pattern</code> (str): Pattern for callback data with {locale} placeholder. - <code>locales</code> (Union[str, List[str]]): Single locale string or list of locale codes. - <code>row_width</code> (int): Number of buttons per row. Must be &gt;= 1.</p> <p>Raises: - <code>LocaleError</code>: If locale parameters are invalid.</p>"},{"location":"api/inline-keyboard/#add_custom_localelocale_code-display_name","title":"add_custom_locale(locale_code, display_name)","text":"<p>Add a custom locale to the keyboard's locale dictionary.</p> <p>Parameters: - <code>locale_code</code> (str): The locale code (e.g., 'en_CUSTOM') - <code>display_name</code> (str): The display name with flag emoji</p>"},{"location":"api/inline-keyboard/#remove_custom_localelocale_code","title":"remove_custom_locale(locale_code)","text":"<p>Remove a custom locale from the keyboard.</p> <p>Parameters: - <code>locale_code</code> (str): The locale code to remove</p> <p>Returns: - <code>bool</code>: True if the locale was removed, False if it didn't exist</p>"},{"location":"api/inline-keyboard/#get_custom_locales","title":"get_custom_locales()","text":"<p>Get all custom locales defined for this keyboard.</p> <p>Returns: - <code>Dict[str, str]</code>: Dictionary of custom locale codes to display names</p>"},{"location":"api/inline-keyboard/#get_all_locales","title":"get_all_locales()","text":"<p>Get all available locales including built-in and custom ones.</p> <p>Returns: - <code>Dict[str, str]</code>: Combined dictionary of all available locales</p>"},{"location":"api/inline-keyboard/#to_json","title":"to_json()","text":"<p>Convert keyboard to JSON string.</p> <p>Returns: - <code>str</code>: JSON representation of the keyboard</p>"},{"location":"api/inline-keyboard/#from_jsonjson_str","title":"from_json(json_str)","text":"<p>Create keyboard instance from JSON string.</p> <p>Parameters: - <code>json_str</code> (str): JSON string representation of a keyboard</p> <p>Returns: - <code>InlineKeyboard</code>: Reconstructed keyboard instance</p>"},{"location":"api/inline-keyboard/#clear_pagination_hashessourcenone","title":"clear_pagination_hashes(source=None)","text":"<p>Clear stored pagination hashes for memory management.</p> <p>Parameters: - <code>source</code> (Optional[str]): Specific source to clear. If None, clears all hashes.</p> <p>Returns: - <code>int</code>: Number of hashes cleared</p>"},{"location":"api/inline-keyboard/#get_pagination_hash_stats","title":"get_pagination_hash_stats()","text":"<p>Get statistics about stored pagination hashes.</p> <p>Returns: - <code>Dict[str, Any]</code>: Dictionary with hash storage statistics</p>"},{"location":"api/inline-keyboard/#properties","title":"Properties","text":""},{"location":"api/inline-keyboard/#pyrogram_markup","title":"pyrogram_markup","text":"<p>Get the Pyrogram InlineKeyboardMarkup for this keyboard.</p> <p>Returns: - <code>InlineKeyboardMarkup</code>: Pyrogram-compatible markup</p>"},{"location":"api/inline-keyboard/#class-methods","title":"Class Methods","text":""},{"location":"api/inline-keyboard/#clear_pagination_hashessourcenone_1","title":"clear_pagination_hashes(source=None)","text":"<p>Clear stored pagination hashes for memory management.</p>"},{"location":"api/inline-keyboard/#get_pagination_hash_stats_1","title":"get_pagination_hash_stats()","text":"<p>Get statistics about stored pagination hashes.</p>"},{"location":"api/reply-keyboard/","title":"ReplyKeyboard API Reference","text":""},{"location":"api/reply-keyboard/#class-replykeyboard","title":"Class: ReplyKeyboard","text":"<p>Reply keyboard with comprehensive Pyrogram integration and customization options.</p>"},{"location":"api/reply-keyboard/#constructor","title":"Constructor","text":"<pre><code>ReplyKeyboard(\n    row_width: int = 3,\n    is_persistent: Optional[bool] = None,\n    resize_keyboard: Optional[bool] = None,\n    one_time_keyboard: Optional[bool] = None,\n    selective: Optional[bool] = None,\n    placeholder: Optional[str] = None\n)\n</code></pre>"},{"location":"api/reply-keyboard/#attributes","title":"Attributes","text":"<ul> <li><code>row_width</code> (int): Number of buttons per row (default: 3)</li> <li><code>is_persistent</code> (Optional[bool]): Whether the keyboard is persistent</li> <li><code>resize_keyboard</code> (Optional[bool]): Whether to resize the keyboard</li> <li><code>one_time_keyboard</code> (Optional[bool]): Whether it's a one-time keyboard</li> <li><code>selective</code> (Optional[bool]): Whether the keyboard is selective</li> <li><code>placeholder</code> (Optional[str]): Placeholder text for the input field</li> </ul>"},{"location":"api/reply-keyboard/#methods","title":"Methods","text":""},{"location":"api/reply-keyboard/#addargs","title":"add(*args)","text":"<p>Add buttons to keyboard in rows based on row_width.</p> <p>Parameters: - <code>*args</code>: Variable number of buttons or button-like objects to add</p>"},{"location":"api/reply-keyboard/#rowargs","title":"row(*args)","text":"<p>Add a new row of buttons to the keyboard.</p> <p>Parameters: - <code>*args</code>: Variable number of buttons to add as a single row</p>"},{"location":"api/reply-keyboard/#to_dict","title":"to_dict()","text":"<p>Convert keyboard to dictionary representation for serialization.</p> <p>Returns: - <code>dict</code>: Dictionary representation of the keyboard</p>"},{"location":"api/reply-keyboard/#from_dictdata","title":"from_dict(data)","text":"<p>Create keyboard instance from dictionary representation.</p> <p>Parameters: - <code>data</code> (dict): Dictionary representation of a keyboard</p> <p>Returns: - <code>ReplyKeyboard</code>: Reconstructed keyboard instance</p>"},{"location":"api/reply-keyboard/#to_json","title":"to_json()","text":"<p>Convert keyboard to JSON string.</p> <p>Returns: - <code>str</code>: JSON representation of the keyboard</p>"},{"location":"api/reply-keyboard/#from_jsonjson_str","title":"from_json(json_str)","text":"<p>Create keyboard instance from JSON string.</p> <p>Parameters: - <code>json_str</code> (str): JSON string representation of a keyboard</p> <p>Returns: - <code>ReplyKeyboard</code>: Reconstructed keyboard instance</p>"},{"location":"api/reply-keyboard/#properties","title":"Properties","text":""},{"location":"api/reply-keyboard/#pyrogram_markup","title":"pyrogram_markup","text":"<p>Get the Pyrogram ReplyKeyboardMarkup for this keyboard.</p> <p>Returns: - <code>ReplyKeyboardMarkup</code>: Pyrogram-compatible markup</p>"},{"location":"api/reply-keyboard/#class-replybutton","title":"Class: ReplyButton","text":"<p>Reply keyboard button with comprehensive Pyrogram integration and advanced features.</p>"},{"location":"api/reply-keyboard/#constructor_1","title":"Constructor","text":"<pre><code>ReplyButton(\n    text: str,\n    request_contact: Optional[bool] = None,\n    request_location: Optional[bool] = None,\n    request_poll: Optional[KeyboardButtonPollType] = None,\n    request_users: Optional[KeyboardButtonRequestUsers] = None,\n    request_chat: Optional[KeyboardButtonRequestChat] = None,\n    web_app: Optional[WebAppInfo] = None\n)\n</code></pre>"},{"location":"api/reply-keyboard/#attributes_1","title":"Attributes","text":"<ul> <li><code>text</code> (str): Button display text</li> <li><code>request_contact</code> (Optional[bool]): Request contact information</li> <li><code>request_location</code> (Optional[bool]): Request location information</li> <li><code>request_poll</code> (Optional[KeyboardButtonPollType]): Request poll</li> <li><code>request_users</code> (Optional[KeyboardButtonRequestUsers]): Request users</li> <li><code>request_chat</code> (Optional[KeyboardButtonRequestChat]): Request chat</li> <li><code>web_app</code> (Optional[WebAppInfo]): Web app to open</li> </ul>"},{"location":"api/reply-keyboard/#methods_1","title":"Methods","text":""},{"location":"api/reply-keyboard/#to_pyrogram","title":"to_pyrogram()","text":"<p>Convert to Pyrogram KeyboardButton.</p> <p>Returns: - <code>KeyboardButton</code>: Pyrogram-compatible button instance</p>"},{"location":"api/reply-keyboard/#class-pyreplykeyboardremove","title":"Class: PyReplyKeyboardRemove","text":"<p>Remove reply keyboard markup with selective option.</p>"},{"location":"api/reply-keyboard/#constructor_2","title":"Constructor","text":"<pre><code>PyReplyKeyboardRemove(selective: Optional[bool] = None)\n</code></pre>"},{"location":"api/reply-keyboard/#attributes_2","title":"Attributes","text":"<ul> <li><code>selective</code> (Optional[bool]): Whether the removal should be selective</li> </ul>"},{"location":"api/reply-keyboard/#methods_2","title":"Methods","text":""},{"location":"api/reply-keyboard/#to_pyrogram_1","title":"to_pyrogram()","text":"<p>Convert to Pyrogram ReplyKeyboardRemove.</p> <p>Returns: - <code>ReplyKeyboardRemove</code>: Pyrogram-compatible remove markup</p>"},{"location":"api/reply-keyboard/#class-pyforcereply","title":"Class: PyForceReply","text":"<p>Force user to send a reply with selective and placeholder options.</p>"},{"location":"api/reply-keyboard/#constructor_3","title":"Constructor","text":"<pre><code>PyForceReply(\n    selective: Optional[bool] = None,\n    placeholder: Optional[str] = None\n)\n</code></pre>"},{"location":"api/reply-keyboard/#attributes_3","title":"Attributes","text":"<ul> <li><code>selective</code> (Optional[bool]): Whether the force reply should be selective</li> <li><code>placeholder</code> (Optional[str]): Placeholder text shown in the input field</li> </ul>"},{"location":"api/reply-keyboard/#methods_3","title":"Methods","text":""},{"location":"api/reply-keyboard/#to_pyrogram_2","title":"to_pyrogram()","text":"<p>Convert to Pyrogram ForceReply.</p> <p>Returns: - <code>ForceReply</code>: Pyrogram-compatible force reply markup</p>"},{"location":"api/utilities/","title":"Utilities API Reference","text":""},{"location":"api/utilities/#python-version-utilities","title":"Python Version Utilities","text":""},{"location":"api/utilities/#get_python_version","title":"get_python_version()","text":"<p>Get the current Python version as a tuple.</p> <p>Returns: - <code>tuple[int, int, int]</code>: Tuple of (major, minor, micro) version numbers</p>"},{"location":"api/utilities/#supports_match_case","title":"supports_match_case()","text":"<p>Check if the current Python version supports match/case statements.</p> <p>Returns: - <code>bool</code>: True if Python 3.10+ is available, False otherwise</p>"},{"location":"api/utilities/#supports_typing_self","title":"supports_typing_self()","text":"<p>Check if the current Python version supports typing.Self.</p> <p>Returns: - <code>bool</code>: True if Python 3.11+ is available, False otherwise</p>"},{"location":"api/utilities/#supports_literal_types","title":"supports_literal_types()","text":"<p>Check if the current Python version supports Literal types.</p> <p>Returns: - <code>bool</code>: True if Python 3.8+ is available, False otherwise</p>"},{"location":"api/utilities/#keyboard-creation-utilities","title":"Keyboard Creation Utilities","text":""},{"location":"api/utilities/#create_keyboard_from_configconfig","title":"create_keyboard_from_config(config)","text":"<p>Create a keyboard from a configuration dictionary using modern Python features.</p> <p>Parameters: - <code>config</code> (Dict[str, Any]): Configuration dictionary with keyboard settings</p> <p>Returns: - <code>Union[InlineKeyboard, ReplyKeyboard]</code>: Configured keyboard instance</p> <p>Raises: - <code>ValueError</code>: If configuration is invalid</p>"},{"location":"api/utilities/#get_keyboard_infokeyboard","title":"get_keyboard_info(keyboard)","text":"<p>Get comprehensive information about a keyboard using modern typing features.</p> <p>Parameters: - <code>keyboard</code> (Union[InlineKeyboard, ReplyKeyboard]): The keyboard to analyze</p> <p>Returns: - <code>Dict[str, Any]</code>: Dictionary with keyboard information</p>"},{"location":"api/utilities/#validate_keyboard_configconfig","title":"validate_keyboard_config(config)","text":"<p>Validate a keyboard configuration using modern Python features.</p> <p>Parameters: - <code>config</code> (Dict[str, Any]): Configuration dictionary to validate</p> <p>Returns: - <code>List[str]</code>: List of validation error messages (empty if valid)</p>"},{"location":"api/utilities/#file-io-utilities","title":"File I/O Utilities","text":""},{"location":"api/utilities/#export_keyboard_to_filekeyboard-file_path-formatjson","title":"export_keyboard_to_file(keyboard, file_path, format='json')","text":"<p>Export a keyboard to a file using modern Python features.</p> <p>Parameters: - <code>keyboard</code> (Union[InlineKeyboard, ReplyKeyboard]): The keyboard to export - <code>file_path</code> (Union[str, Path]): Path to save the file - <code>format</code> (Literal['json', 'yaml', 'pickle']): Export format</p> <p>Raises: - <code>ValueError</code>: If format is unsupported - <code>ImportError</code>: If required library is not available</p>"},{"location":"api/utilities/#import_keyboard_from_filefile_path-formatjson","title":"import_keyboard_from_file(file_path, format='json')","text":"<p>Import a keyboard from a file using modern Python features.</p> <p>Parameters: - <code>file_path</code> (Union[str, Path]): Path to the file to load - <code>format</code> (Literal['json', 'yaml', 'pickle']): Import format</p> <p>Returns: - <code>Union[InlineKeyboard, ReplyKeyboard]</code>: Loaded keyboard instance</p> <p>Raises: - <code>ValueError</code>: If format is unsupported - <code>ImportError</code>: If required library is not available</p>"},{"location":"api/utilities/#feature-demonstration","title":"Feature Demonstration","text":""},{"location":"api/utilities/#demonstrate_modern_features","title":"demonstrate_modern_features()","text":"<p>Demonstrate modern Python features usage in the library.</p> <p>Returns: - <code>Dict[str, Any]</code>: Dictionary with information about Python version and supported features</p>"},{"location":"api/utilities/#type-aliases","title":"Type Aliases","text":""},{"location":"api/utilities/#keyboardtype","title":"KeyboardType","text":"<p>Type alias for keyboard types.</p> <pre><code>KeyboardType = Literal['inline', 'reply']  # or str if Literal not supported\n</code></pre>"},{"location":"api/utilities/#exportformat","title":"ExportFormat","text":"<p>Type alias for export formats.</p> <p>```python ExportFormat = Literal['json', 'yaml', 'pickle']  # or str if Literal not supported</p>"},{"location":"examples/basic-bot/","title":"Basic Bot Example","text":"<p>This example demonstrates how to create a simple Telegram bot using PyKeyboard for basic keyboard interactions.</p> <p>Note: ALTHOUGH WE BELIEVE THIS EXAMPLE SHOULD WORK, IT IS NOT TESTED AND MIGHT NOT WORK.  USE AT YOUR OWN RISK. YOU CAN INSTEAD REFER TO THIS SCRIPT WHICH HAS BEEN TESTED AND WORKS: Showcase Bot.</p>"},{"location":"examples/basic-bot/#overview","title":"Overview","text":"<p>This example shows: - Creating a basic inline keyboard - Handling callback queries - Simple bot structure</p>"},{"location":"examples/basic-bot/#code-example","title":"Code Example","text":"<pre><code>from pyrogram import Client, filters\nfrom pykeyboard import InlineKeyboard, InlineButton\n\napp = Client(\"basic_bot\")\n\n# Create a simple keyboard\nkeyboard = InlineKeyboard()\nkeyboard.add(\n    InlineButton(\"Option 1\", callback_data=\"option1\"),\n    InlineButton(\"Option 2\", callback_data=\"option2\"),\n    InlineButton(\"Help\", callback_data=\"help\")\n)\n\n@app.on_message(filters.command(\"start\"))\nasync def start_command(client, message):\n    await message.reply_text(\n        \"Choose an option:\",\n        reply_markup=keyboard\n    )\n\n@app.on_callback_query()\nasync def handle_callback(client, callback_query):\n    data = callback_query.data\n\n    if data == \"option1\":\n        await callback_query.answer(\"You selected Option 1!\")\n        await callback_query.edit_message_text(\"You chose Option 1\")\n    elif data == \"option2\":\n        await callback_query.answer(\"You selected Option 2!\")\n        await callback_query.edit_message_text(\"You chose Option 2\")\n    elif data == \"help\":\n        await callback_query.answer(\"Help information\")\n        await callback_query.edit_message_text(\n            \"This is a basic bot example.\\n\\n\"\n            \"Use /start to see the keyboard again.\"\n        )\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>"},{"location":"examples/basic-bot/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Basic inline keyboard creation</li> <li>Callback query handling</li> <li>Message editing</li> <li>Simple command handling</li> </ul>"},{"location":"examples/basic-bot/#running-the-example","title":"Running the Example","text":"<ol> <li>Install PyKeyboard: <code>pip install pykeyboard-kurigram</code></li> <li>Set up your bot token in environment variables</li> <li>Run the script: <code>python basic_bot.py</code></li> <li>Send <code>/start</code> to your bot to see the keyboard</li> </ol>"},{"location":"examples/ecommerce/","title":"E-commerce Bot Example","text":"<p>This example demonstrates how to create an e-commerce bot with product catalog, shopping cart, and checkout functionality using PyKeyboard.</p> <p>Note: ALTHOUGH WE BELIEVE THIS EXAMPLE SHOULD WORK, IT IS NOT TESTED AND MIGHT NOT WORK.  USE AT YOUR OWN RISK. YOU CAN INSTEAD REFER TO THIS SCRIPT WHICH HAS BEEN TESTED AND WORKS: Showcase Bot.</p>"},{"location":"examples/ecommerce/#overview","title":"Overview","text":"<p>This example shows: - Product catalog with pagination - Shopping cart management - Checkout process - Order confirmation - Using KeyboardFactory for common patterns</p>"},{"location":"examples/ecommerce/#code-example","title":"Code Example","text":"<pre><code>from pyrogram import Client, filters\nfrom pykeyboard import KeyboardFactory, InlineKeyboard, InlineButton\nfrom typing import Dict, List\nimport json\n\napp = Client(\"ecommerce_bot\")\n\n# Mock product data\nPRODUCTS = [\n    {\"id\": 1, \"name\": \"Wireless Headphones\", \"price\": 99.99, \"category\": \"Electronics\"},\n    {\"id\": 2, \"name\": \"Smart Watch\", \"price\": 199.99, \"category\": \"Electronics\"},\n    {\"id\": 3, \"name\": \"Coffee Maker\", \"price\": 79.99, \"category\": \"Appliances\"},\n    {\"id\": 4, \"name\": \"Running Shoes\", \"price\": 129.99, \"category\": \"Sports\"},\n    {\"id\": 5, \"name\": \"Yoga Mat\", \"price\": 39.99, \"category\": \"Sports\"},\n    {\"id\": 6, \"name\": \"Cookbook\", \"price\": 24.99, \"category\": \"Books\"},\n]\n\n# User cart storage (in production, use a database)\nuser_carts: Dict[int, List[Dict]] = {}\n\ndef get_products_page(page: int, per_page: int = 3):\n    \"\"\"Get products for a specific page.\"\"\"\n    start = (page - 1) * per_page\n    end = start + per_page\n    return PRODUCTS[start:end]\n\ndef create_product_keyboard(products: List[Dict], current_page: int, total_pages: int):\n    \"\"\"Create keyboard for product listing with pagination.\"\"\"\n    keyboard = InlineKeyboard()\n\n    # Add products\n    for product in products:\n        keyboard.row(\n            InlineButton(\n                f\"{product['name']} - ${product['price']}\",\n                callback_data=f\"product:{product['id']}\"\n            ),\n            InlineButton(\"\ud83d\uded2 Add to Cart\", callback_data=f\"add_cart:{product['id']}\")\n        )\n\n    # Add pagination\n    if total_pages &gt; 1:\n        keyboard.paginate(total_pages, current_page, \"page:{number}\")\n\n    # Add cart and navigation\n    keyboard.row(\n        InlineButton(\"\ud83d\uded2 View Cart\", callback_data=\"view_cart\"),\n        InlineButton(\"\ud83d\udcc2 Categories\", callback_data=\"categories\")\n    )\n\n    return keyboard\n\ndef create_cart_keyboard(cart_items: List[Dict]):\n    \"\"\"Create keyboard for cart management.\"\"\"\n    keyboard = InlineKeyboard()\n\n    if not cart_items:\n        keyboard.add(InlineButton(\"\ud83d\udecd\ufe0f Continue Shopping\", callback_data=\"page:1\"))\n        return keyboard\n\n    total = sum(item['price'] * item['quantity'] for item in cart_items)\n\n    # Cart items\n    for item in cart_items:\n        keyboard.row(\n            InlineButton(\n                f\"{item['name']} x{item['quantity']} - ${item['price'] * item['quantity']:.2f}\",\n                callback_data=f\"cart_item:{item['id']}\"\n            ),\n            InlineButton(\"\u2795\", callback_data=f\"cart_add:{item['id']}\"),\n            InlineButton(\"\u2796\", callback_data=f\"cart_remove:{item['id']}\")\n        )\n\n    # Total and actions\n    keyboard.row(InlineButton(f\"\ud83d\udcb0 Total: ${total:.2f}\", callback_data=\"total\"))\n    keyboard.row(\n        InlineButton(\"\u2705 Checkout\", callback_data=\"checkout\"),\n        InlineButton(\"\ud83d\udecd\ufe0f Continue Shopping\", callback_data=\"page:1\"),\n        InlineButton(\"\ud83d\uddd1\ufe0f Clear Cart\", callback_data=\"clear_cart\")\n    )\n\n    return keyboard\n\n@app.on_message(filters.command(\"start\"))\nasync def start_command(client, message):\n    user_id = message.from_user.id\n    user_carts[user_id] = []\n\n    products = get_products_page(1)\n    keyboard = create_product_keyboard(products, 1, (len(PRODUCTS) + 2) // 3)\n\n    await message.reply_text(\n        \"\ud83d\udecd\ufe0f **Welcome to our Store!**\\n\\n\"\n        \"Browse our products and add them to your cart:\",\n        reply_markup=keyboard\n    )\n\n@app.on_callback_query(filters.regex(r\"^page:\"))\nasync def handle_pagination(client, callback_query):\n    page = int(callback_query.data.split(\":\")[1])\n    products = get_products_page(page)\n    total_pages = (len(PRODUCTS) + 2) // 3\n    keyboard = create_product_keyboard(products, page, total_pages)\n\n    await callback_query.edit_message_text(\n        f\"\ud83d\udecd\ufe0f **Products (Page {page}/{total_pages})**\\n\\n\"\n        \"Browse our products:\",\n        reply_markup=keyboard\n    )\n    await callback_query.answer()\n\n@app.on_callback_query(filters.regex(r\"^add_cart:\"))\nasync def handle_add_to_cart(client, callback_query):\n    user_id = callback_query.from_user.id\n    product_id = int(callback_query.data.split(\":\")[1])\n\n    if user_id not in user_carts:\n        user_carts[user_id] = []\n\n    product = next((p for p in PRODUCTS if p['id'] == product_id), None)\n    if product:\n        # Check if product already in cart\n        cart_item = next((item for item in user_carts[user_id] if item['id'] == product_id), None)\n        if cart_item:\n            cart_item['quantity'] += 1\n        else:\n            user_carts[user_id].append({**product, 'quantity': 1})\n\n        await callback_query.answer(f\"\u2705 {product['name']} added to cart!\")\n\n@app.on_callback_query(filters.regex(r\"^view_cart$\"))\nasync def handle_view_cart(client, callback_query):\n    user_id = callback_query.from_user.id\n    cart_items = user_carts.get(user_id, [])\n    keyboard = create_cart_keyboard(cart_items)\n\n    cart_text = \"\ud83d\uded2 **Your Cart**\\n\\n\"\n    if not cart_items:\n        cart_text += \"Your cart is empty.\"\n    else:\n        for item in cart_items:\n            cart_text += f\"\u2022 {item['name']} x{item['quantity']} - ${item['price'] * item['quantity']:.2f}\\n\"\n        total = sum(item['price'] * item['quantity'] for item in cart_items)\n        cart_text += f\"\\n**Total: ${total:.2f}**\"\n\n    await callback_query.edit_message_text(cart_text, reply_markup=keyboard)\n    await callback_query.answer()\n\n@app.on_callback_query(filters.regex(r\"^checkout$\"))\nasync def handle_checkout(client, callback_query):\n    user_id = callback_query.from_user.id\n    cart_items = user_carts.get(user_id, [])\n\n    if not cart_items:\n        await callback_query.answer(\"Your cart is empty!\")\n        return\n\n    total = sum(item['price'] * item['quantity'] for item in cart_items)\n\n    # Create confirmation keyboard\n    keyboard = KeyboardFactory.create_confirmation_keyboard(\n        yes_text=\"\u2705 Confirm Order\",\n        no_text=\"\u274c Cancel\",\n        callback_pattern=\"order_{action}\"\n    )\n\n    order_summary = \"\ud83d\udccb **Order Summary**\\n\\n\"\n    for item in cart_items:\n        order_summary += f\"\u2022 {item['name']} x{item['quantity']} - ${item['price'] * item['quantity']:.2f}\\n\"\n    order_summary += f\"\\n**Total: ${total:.2f}**\\n\\nConfirm your order?\"\n\n    await callback_query.edit_message_text(order_summary, reply_markup=keyboard)\n    await callback_query.answer()\n\n@app.on_callback_query(filters.regex(r\"^order_\"))\nasync def handle_order_confirmation(client, callback_query):\n    action = callback_query.data.split(\"_\")[1]\n    user_id = callback_query.from_user.id\n\n    if action == \"yes\":\n        # Process order (in production, save to database)\n        cart_items = user_carts.get(user_id, [])\n        total = sum(item['price'] * item['quantity'] for item in cart_items)\n\n        # Clear cart\n        user_carts[user_id] = []\n\n        await callback_query.edit_message_text(\n            \"\u2705 **Order Confirmed!**\\n\\n\"\n            f\"Thank you for your purchase!\\n\"\n            f\"Total: ${total:.2f}\\n\\n\"\n            \"You will receive a confirmation email shortly.\",\n            reply_markup=InlineKeyboard().add(\n                InlineButton(\"\ud83d\udecd\ufe0f Continue Shopping\", callback_data=\"page:1\")\n            )\n        )\n    else:\n        await callback_query.edit_message_text(\n            \"\u274c Order cancelled.\\n\\n\"\n            \"You can continue shopping:\",\n            reply_markup=create_product_keyboard(get_products_page(1), 1, (len(PRODUCTS) + 2) // 3)\n        )\n\n    await callback_query.answer()\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>"},{"location":"examples/ecommerce/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Product catalog with pagination</li> <li>Shopping cart management</li> <li>Add/remove items from cart</li> <li>Checkout process</li> <li>Order confirmation</li> <li>Using KeyboardFactory for common UI patterns</li> </ul>"},{"location":"examples/ecommerce/#e-commerce-flow","title":"E-commerce Flow","text":"<pre><code>Browse Products \u2192 Add to Cart \u2192 View Cart \u2192 Checkout \u2192 Order Confirmation\n</code></pre>"},{"location":"examples/ecommerce/#running-the-example","title":"Running the Example","text":"<ol> <li>Install PyKeyboard: <code>pip install pykeyboard-kurigram</code></li> <li>Set up your bot token</li> <li>Run the script: <code>python ecommerce_bot.py</code></li> <li>Send <code>/start</code> to begin shopping</li> <li>Browse products, add to cart, and checkout</li> </ol>"},{"location":"examples/menu-system/","title":"Menu System Example","text":"<p>This example demonstrates how to create a hierarchical menu system using PyKeyboard with navigation between different menu levels.</p> <p>Note: ALTHOUGH WE BELIEVE THIS EXAMPLE SHOULD WORK, IT IS NOT TESTED AND MIGHT NOT WORK.  USE AT YOUR OWN RISK. YOU CAN INSTEAD REFER TO THIS SCRIPT WHICH HAS BEEN TESTED AND WORKS: Showcase Bot.</p>"},{"location":"examples/menu-system/#overview","title":"Overview","text":"<p>This example shows: - Creating multi-level menu systems - Navigation between menus - State management for menu context - Using the KeyboardBuilder for complex layouts</p>"},{"location":"examples/menu-system/#code-example","title":"Code Example","text":"<pre><code>from pyrogram import Client, filters\nfrom pykeyboard import KeyboardBuilder, InlineKeyboard\nfrom typing import Dict\n\napp = Client(\"menu_bot\")\n\n# Menu state storage (in production, use a database)\nuser_menu_states: Dict[int, str] = {}\n\n# Define menu structure\nMAIN_MENU = \"main\"\nSETTINGS_MENU = \"settings\"\nPROFILE_MENU = \"profile\"\n\ndef create_main_menu():\n    keyboard = InlineKeyboard()\n    keyboard.add(\n        InlineButton(\"\ud83d\udcca Dashboard\", callback_data=\"menu:dashboard\"),\n        InlineButton(\"\u2699\ufe0f Settings\", callback_data=\"menu:settings\"),\n        InlineButton(\"\ud83d\udc64 Profile\", callback_data=\"menu:profile\"),\n        InlineButton(\"\u2139\ufe0f Help\", callback_data=\"menu:help\")\n    )\n    return keyboard\n\ndef create_settings_menu():\n    keyboard = InlineKeyboard()\n    keyboard.add(\n        InlineButton(\"\ud83d\udd14 Notifications\", callback_data=\"settings:notifications\"),\n        InlineButton(\"\ud83c\udf10 Language\", callback_data=\"settings:language\"),\n        InlineButton(\"\ud83d\udd12 Privacy\", callback_data=\"settings:privacy\"),\n        InlineButton(\"\u2b05\ufe0f Back\", callback_data=\"menu:main\")\n    )\n    return keyboard\n\ndef create_profile_menu():\n    keyboard = InlineKeyboard()\n    keyboard.add(\n        InlineButton(\"\ud83d\udcdd Edit Profile\", callback_data=\"profile:edit\"),\n        InlineButton(\"\ud83d\udcf8 Change Photo\", callback_data=\"profile:photo\"),\n        InlineButton(\"\ud83d\udcca Statistics\", callback_data=\"profile:stats\"),\n        InlineButton(\"\u2b05\ufe0f Back\", callback_data=\"menu:main\")\n    )\n    return keyboard\n\n@app.on_message(filters.command(\"start\"))\nasync def start_command(client, message):\n    user_id = message.from_user.id\n    user_menu_states[user_id] = MAIN_MENU\n\n    keyboard = create_main_menu()\n    await message.reply_text(\n        \"\ud83c\udfe0 **Main Menu**\\n\\nWelcome! Choose an option:\",\n        reply_markup=keyboard\n    )\n\n@app.on_callback_query(filters.regex(r\"^menu:\"))\nasync def handle_menu_navigation(client, callback_query):\n    user_id = callback_query.from_user.id\n    menu_action = callback_query.data.split(\":\", 1)[1]\n\n    if menu_action == \"main\":\n        user_menu_states[user_id] = MAIN_MENU\n        keyboard = create_main_menu()\n        await callback_query.edit_message_text(\n            \"\ud83c\udfe0 **Main Menu**\\n\\nChoose an option:\",\n            reply_markup=keyboard\n        )\n\n    elif menu_action == \"settings\":\n        user_menu_states[user_id] = SETTINGS_MENU\n        keyboard = create_settings_menu()\n        await callback_query.edit_message_text(\n            \"\u2699\ufe0f **Settings**\\n\\nConfigure your preferences:\",\n            reply_markup=keyboard\n        )\n\n    elif menu_action == \"profile\":\n        user_menu_states[user_id] = PROFILE_MENU\n        keyboard = create_profile_menu()\n        await callback_query.edit_message_text(\n            \"\ud83d\udc64 **Profile**\\n\\nManage your profile:\",\n            reply_markup=keyboard\n        )\n\n    elif menu_action == \"help\":\n        await callback_query.edit_message_text(\n            \"\u2139\ufe0f **Help**\\n\\n\"\n            \"\u2022 Dashboard: View your statistics\\n\"\n            \"\u2022 Settings: Configure preferences\\n\"\n            \"\u2022 Profile: Manage your account\\n\\n\"\n            \"Use the Back buttons to navigate.\",\n            reply_markup=create_main_menu()\n        )\n\n    await callback_query.answer()\n\n@app.on_callback_query(filters.regex(r\"^(settings|profile):\"))\nasync def handle_submenu_actions(client, callback_query):\n    action = callback_query.data\n\n    if action == \"settings:notifications\":\n        await callback_query.answer(\"Notifications settings opened!\")\n        # Implement notifications settings\n\n    elif action == \"settings:language\":\n        await callback_query.answer(\"Language settings opened!\")\n        # Implement language selection\n\n    elif action == \"profile:edit\":\n        await callback_query.answer(\"Profile editing opened!\")\n        # Implement profile editing\n\n    # Add more submenu handlers as needed\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>"},{"location":"examples/menu-system/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Hierarchical menu navigation</li> <li>State management for user context</li> <li>Callback data routing</li> <li>Dynamic keyboard generation</li> <li>Back navigation</li> </ul>"},{"location":"examples/menu-system/#menu-structure","title":"Menu Structure","text":"<pre><code>Main Menu\n\u251c\u2500\u2500 Dashboard\n\u251c\u2500\u2500 Settings\n\u2502   \u251c\u2500\u2500 Notifications\n\u2502   \u251c\u2500\u2500 Language\n\u2502   \u2514\u2500\u2500 Privacy\n\u251c\u2500\u2500 Profile\n\u2502   \u251c\u2500\u2500 Edit Profile\n\u2502   \u251c\u2500\u2500 Change Photo\n\u2502   \u2514\u2500\u2500 Statistics\n\u2514\u2500\u2500 Help\n</code></pre>"},{"location":"examples/menu-system/#running-the-example","title":"Running the Example","text":"<ol> <li>Install PyKeyboard: <code>pip install pykeyboard-kurigram</code></li> <li>Set up your bot token</li> <li>Run the script: <code>python menu_system.py</code></li> <li>Send <code>/start</code> to see the main menu</li> <li>Navigate through different menu levels</li> </ol>"},{"location":"examples/multilingual/","title":"Multi-language Bot Example","text":"<p>This example demonstrates how to create a multilingual bot with language selection, locale management, and translated content using PyKeyboard's built-in language support.</p> <p>Note: ALTHOUGH WE BELIEVE THIS EXAMPLE SHOULD WORK, IT IS NOT TESTED AND MIGHT NOT WORK.  USE AT YOUR OWN RISK. YOU CAN INSTEAD REFER TO THIS SCRIPT WHICH HAS BEEN TESTED AND WORKS: Showcase Bot.</p>"},{"location":"examples/multilingual/#overview","title":"Overview","text":"<p>This example shows: - Language selection using built-in locales - Custom locale management - Dynamic content translation - Persistent language preferences - Using the languages() method for locale selection</p>"},{"location":"examples/multilingual/#code-example","title":"Code Example","text":"<pre><code>from pyrogram import Client, filters\nfrom pykeyboard import InlineKeyboard, InlineButton\nfrom typing import Dict, Optional\nimport json\n\napp = Client(\"multilingual_bot\")\n\n# Language storage (in production, use a database)\nuser_languages: Dict[int, str] = {}\n\n# Translation dictionaries\nTRANSLATIONS = {\n    \"en_US\": {\n        \"welcome\": \"\ud83c\udfe0 **Welcome!**\\n\\nChoose your language:\",\n        \"main_menu\": \"\ud83c\udfe0 **Main Menu**\\n\\nWhat would you like to do?\",\n        \"settings\": \"\u2699\ufe0f **Settings**\\n\\nConfigure your preferences:\",\n        \"language\": \"\ud83c\udf10 **Language**\\n\\nSelect your preferred language:\",\n        \"profile\": \"\ud83d\udc64 **Profile**\\n\\nManage your account:\",\n        \"help\": \"\u2139\ufe0f **Help**\\n\\nAvailable commands:\\n/start - Start the bot\\n/settings - Open settings\\n/help - Show this help\",\n        \"dashboard\": \"\ud83d\udcca **Dashboard**\\n\\nWelcome back! Here's your overview:\",\n        \"change_language\": \"\ud83c\udf10 Change Language\",\n        \"back\": \"\u2b05\ufe0f Back\",\n        \"current_lang\": \"Current: {lang}\"\n    },\n    \"es_ES\": {\n        \"welcome\": \"\ud83c\udfe0 **\u00a1Bienvenido!**\\n\\nElige tu idioma:\",\n        \"main_menu\": \"\ud83c\udfe0 **Men\u00fa Principal**\\n\\n\u00bfQu\u00e9 te gustar\u00eda hacer?\",\n        \"settings\": \"\u2699\ufe0f **Configuraci\u00f3n**\\n\\nConfigura tus preferencias:\",\n        \"language\": \"\ud83c\udf10 **Idioma**\\n\\nSelecciona tu idioma preferido:\",\n        \"profile\": \"\ud83d\udc64 **Perfil**\\n\\nGestiona tu cuenta:\",\n        \"help\": \"\u2139\ufe0f **Ayuda**\\n\\nComandos disponibles:\\n/start - Iniciar el bot\\n/settings - Abrir configuraci\u00f3n\\n/help - Mostrar esta ayuda\",\n        \"dashboard\": \"\ud83d\udcca **Panel**\\n\\n\u00a1Bienvenido de vuelta! Aqu\u00ed est\u00e1 tu resumen:\",\n        \"change_language\": \"\ud83c\udf10 Cambiar Idioma\",\n        \"back\": \"\u2b05\ufe0f Atr\u00e1s\",\n        \"current_lang\": \"Actual: {lang}\"\n    },\n    \"fr_FR\": {\n        \"welcome\": \"\ud83c\udfe0 **Bienvenue !**\\n\\nChoisissez votre langue :\",\n        \"main_menu\": \"\ud83c\udfe0 **Menu Principal**\\n\\nQue souhaitez-vous faire ?\",\n        \"settings\": \"\u2699\ufe0f **Param\u00e8tres**\\n\\nConfigurez vos pr\u00e9f\u00e9rences :\",\n        \"language\": \"\ud83c\udf10 **Langue**\\n\\nS\u00e9lectionnez votre langue pr\u00e9f\u00e9r\u00e9e :\",\n        \"profile\": \"\ud83d\udc64 **Profil**\\n\\nG\u00e9rez votre compte :\",\n        \"help\": \"\u2139\ufe0f **Aide**\\n\\nCommandes disponibles :\\n/start - D\u00e9marrer le bot\\n/settings - Ouvrir les param\u00e8tres\\n/help - Afficher cette aide\",\n        \"dashboard\": \"\ud83d\udcca **Tableau de Bord**\\n\\nBienvenue ! Voici votre aper\u00e7u :\",\n        \"change_language\": \"\ud83c\udf10 Changer de Langue\",\n        \"back\": \"\u2b05\ufe0f Retour\",\n        \"current_lang\": \"Actuel : {lang}\"\n    },\n    \"de_DE\": {\n        \"welcome\": \"\ud83c\udfe0 **Willkommen!**\\n\\nW\u00e4hlen Sie Ihre Sprache:\",\n        \"main_menu\": \"\ud83c\udfe0 **Hauptmen\u00fc**\\n\\nWas m\u00f6chten Sie tun?\",\n        \"settings\": \"\u2699\ufe0f **Einstellungen**\\n\\nKonfigurieren Sie Ihre Einstellungen:\",\n        \"language\": \"\ud83c\udf10 **Sprache**\\n\\nW\u00e4hlen Sie Ihre bevorzugte Sprache:\",\n        \"profile\": \"\ud83d\udc64 **Profil**\\n\\nVerwalten Sie Ihr Konto:\",\n        \"help\": \"\u2139\ufe0f **Hilfe**\\n\\nVerf\u00fcgbare Befehle:\\n/start - Bot starten\\n/settings - Einstellungen \u00f6ffnen\\n/help - Diese Hilfe anzeigen\",\n        \"dashboard\": \"\ud83d\udcca **Dashboard**\\n\\nWillkommen zur\u00fcck! Hier ist Ihre \u00dcbersicht:\",\n        \"change_language\": \"\ud83c\udf10 Sprache \u00c4ndern\",\n        \"back\": \"\u2b05\ufe0f Zur\u00fcck\",\n        \"current_lang\": \"Aktuell: {lang}\"\n    }\n}\n\ndef get_user_language(user_id: int) -&gt; str:\n    \"\"\"Get user's preferred language, default to English.\"\"\"\n    return user_languages.get(user_id, \"en_US\")\n\ndef t(user_id: int, key: str, **kwargs) -&gt; str:\n    \"\"\"Translate a key for the user's language.\"\"\"\n    lang = get_user_language(user_id)\n    translations = TRANSLATIONS.get(lang, TRANSLATIONS[\"en_US\"])\n    text = translations.get(key, f\"[{key}]\")\n    return text.format(**kwargs)\n\ndef create_welcome_keyboard():\n    \"\"\"Create language selection keyboard.\"\"\"\n    keyboard = InlineKeyboard()\n    keyboard.languages(\"set_lang:{locale}\", [\"en_US\", \"es_ES\", \"fr_FR\", \"de_DE\"])\n    return keyboard\n\ndef create_main_menu_keyboard(user_id: int):\n    \"\"\"Create main menu keyboard in user's language.\"\"\"\n    keyboard = InlineKeyboard()\n    keyboard.add(\n        InlineButton(\"\ud83d\udcca \" + t(user_id, \"dashboard\").split(\"**\")[1].split(\"**\")[0],\n                    callback_data=\"menu:dashboard\"),\n        InlineButton(\"\u2699\ufe0f \" + t(user_id, \"settings\").split(\"**\")[1].split(\"**\")[0],\n                    callback_data=\"menu:settings\"),\n        InlineButton(\"\ud83d\udc64 \" + t(user_id, \"profile\").split(\"**\")[1].split(\"**\")[0],\n                    callback_data=\"menu:profile\"),\n        InlineButton(\"\u2139\ufe0f \" + t(user_id, \"help\").split(\"**\")[1].split(\"**\")[0],\n                    callback_data=\"menu:help\")\n    )\n    return keyboard\n\ndef create_settings_keyboard(user_id: int):\n    \"\"\"Create settings keyboard in user's language.\"\"\"\n    keyboard = InlineKeyboard()\n    current_lang = get_user_language(user_id)\n    lang_name = TRANSLATIONS[current_lang][\"current_lang\"].format(lang=current_lang[:2].upper())\n\n    keyboard.add(\n        InlineButton(f\"\ud83c\udf10 {t(user_id, 'change_language')} ({lang_name})\",\n                    callback_data=\"settings:language\"),\n        InlineButton(\"\u2b05\ufe0f \" + t(user_id, \"back\"), callback_data=\"menu:main\")\n    )\n    return keyboard\n\n@app.on_message(filters.command(\"start\"))\nasync def start_command(client, message):\n    user_id = message.from_user.id\n\n    # If user hasn't selected language yet, show language selection\n    if user_id not in user_languages:\n        keyboard = create_welcome_keyboard()\n        await message.reply_text(\n            t(user_id, \"welcome\"),\n            reply_markup=keyboard\n        )\n    else:\n        # Show main menu in user's language\n        keyboard = create_main_menu_keyboard(user_id)\n        await message.reply_text(\n            t(user_id, \"main_menu\"),\n            reply_markup=keyboard\n        )\n\n@app.on_callback_query(filters.regex(r\"^set_lang:\"))\nasync def handle_language_selection(client, callback_query):\n    user_id = callback_query.from_user.id\n    locale = callback_query.data.split(\":\")[1]\n\n    # Save user's language preference\n    user_languages[user_id] = locale\n\n    # Show main menu in selected language\n    keyboard = create_main_menu_keyboard(user_id)\n    await callback_query.edit_message_text(\n        t(user_id, \"main_menu\"),\n        reply_markup=keyboard\n    )\n    await callback_query.answer(f\"Language set to {locale[:2].upper()}!\")\n\n@app.on_callback_query(filters.regex(r\"^menu:\"))\nasync def handle_menu_navigation(client, callback_query):\n    user_id = callback_query.from_user.id\n    menu_action = callback_query.data.split(\":\")[1]\n\n    if menu_action == \"main\":\n        keyboard = create_main_menu_keyboard(user_id)\n        await callback_query.edit_message_text(\n            t(user_id, \"main_menu\"),\n            reply_markup=keyboard\n        )\n\n    elif menu_action == \"settings\":\n        keyboard = create_settings_keyboard(user_id)\n        await callback_query.edit_message_text(\n            t(user_id, \"settings\"),\n            reply_markup=keyboard\n        )\n\n    elif menu_action == \"profile\":\n        keyboard = InlineKeyboard()\n        keyboard.add(InlineButton(\"\u2b05\ufe0f \" + t(user_id, \"back\"), callback_data=\"menu:main\"))\n        await callback_query.edit_message_text(\n            t(user_id, \"profile\"),\n            reply_markup=keyboard\n        )\n\n    elif menu_action == \"help\":\n        keyboard = create_main_menu_keyboard(user_id)\n        await callback_query.edit_message_text(\n            t(user_id, \"help\"),\n            reply_markup=keyboard\n        )\n\n    elif menu_action == \"dashboard\":\n        keyboard = create_main_menu_keyboard(user_id)\n        await callback_query.edit_message_text(\n            t(user_id, \"dashboard\"),\n            reply_markup=keyboard\n        )\n\n    await callback_query.answer()\n\n@app.on_callback_query(filters.regex(r\"^settings:\"))\nasync def handle_settings(client, callback_query):\n    user_id = callback_query.from_user.id\n    setting = callback_query.data.split(\":\")[1]\n\n    if setting == \"language\":\n        keyboard = InlineKeyboard()\n        keyboard.languages(\"set_lang:{locale}\", [\"en_US\", \"es_ES\", \"fr_FR\", \"de_DE\"])\n        await callback_query.edit_message_text(\n            t(user_id, \"language\"),\n            reply_markup=keyboard\n        )\n\n    await callback_query.answer()\n\n@app.on_message(filters.command(\"lang\"))\nasync def change_language_command(client, message):\n    \"\"\"Allow users to change language via command.\"\"\"\n    user_id = message.from_user.id\n    keyboard = create_welcome_keyboard()\n    await message.reply_text(\n        t(user_id, \"welcome\"),\n        reply_markup=keyboard\n    )\n\n# Add custom locale example\ndef add_custom_locale_example():\n    \"\"\"Example of adding a custom locale.\"\"\"\n    keyboard = InlineKeyboard()\n\n    # Add a custom locale\n    keyboard.add_custom_locale(\"en_PIRATE\", \"\ud83c\udff4\u200d\u2620\ufe0f Pirate English\")\n\n    # Use it in language selection\n    keyboard.languages(\"set_lang:{locale}\", [\"en_US\", \"en_PIRATE\"])\n\n    return keyboard\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>"},{"location":"examples/multilingual/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Built-in locale support with 50+ languages</li> <li>Custom locale addition</li> <li>Persistent language preferences</li> <li>Dynamic content translation</li> <li>Language selection keyboards</li> <li>Translation helper functions</li> </ul>"},{"location":"examples/multilingual/#supported-languages","title":"Supported Languages","text":"<p>The example includes translations for: - English (en_US) - Spanish (es_ES) - French (fr_FR) - German (de_DE)</p> <p>PyKeyboard supports 50+ built-in locales with native names and flag emojis.</p>"},{"location":"examples/multilingual/#adding-custom-languages","title":"Adding Custom Languages","text":"<pre><code>keyboard = InlineKeyboard()\nkeyboard.add_custom_locale(\"en_PIRATE\", \"\ud83c\udff4\u200d\u2620\ufe0f Pirate English\")\n</code></pre>"},{"location":"examples/multilingual/#running-the-example","title":"Running the Example","text":"<ol> <li>Install PyKeyboard: <code>pip install pykeyboard-kurigram</code></li> <li>Set up your bot token</li> <li>Run the script: <code>python multilingual_bot.py</code></li> <li>Send <code>/start</code> to select your language</li> <li>Navigate through the multilingual interface</li> <li>Use <code>/lang</code> to change language anytime</li> </ol>"}]}